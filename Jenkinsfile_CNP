#!groovy

properties([
  disableConcurrentBuilds(),
  parameters([
    string(
      name: 'FUNCTIONAL_TESTS_WORKERS',
      defaultValue: '4',
      description: 'Number of workers running functional tests'
    ),
    string(
      name: 'TAGS_TO_RUN',
      defaultValue: '',
      description: 'Optionally, run a single or multiple tags (comma separated e.g. @cui, @exui)'
    ),
    choice(
      name: 'browser',
      choices: ['chrome', 'firefox', 'webkit', 'edge'],
      description: 'Which browser to use'
    ),
    choice(
      name: 'TEST_SUITE',
      choices: ['bvt', 'regression', 'bvt_and_regression'],
      description: 'Select which test suite(s) to run',
      defaultValue: 'bvt'
    ),
  ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "snl-automation"
def component = "e2e-tests"
def channel = "#list-assist-qa-builds"

static Map<String, Object> secret(String secretName, String envVariable) {
  [
    $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def secrets = [
  'snl-automation-bts-stg': [
    secret('test-password', 'TEST_USERNAME'),
    secret('test-username', 'TEST_PASSWORD'),
    secret('base-url', 'BASE_URL'),
    secret('hmi-client-id', 'HMI_CLIENT_ID'),
    secret('hmi-client-secret', 'HMI_CLIENT_SECRET'),
    secret('hmi-scope', 'HMI_SCOPE'),
    secret('hmi-token-url', 'HMI_TOKEN_URL'),
    secret('hmi-token-tenant', 'HMI_TOKEN_TENANT'),
    secret('hmi-grant-type', 'HMI_GRANT_TYPE'),
    secret('hmi-api-url', 'HMI_API_URL'),
  ]
]

def buildPlaywrightCommand(tags) {
  if (tags == null || tags.trim().isEmpty()) {
    return;
  }
  def tagList = tags.split(',').collect { it.trim() }
  def command = 'playwright test'
  tagList.each { tag ->
    if (!tag.isEmpty()) {
      command += " --grep ${tag} --project ${params.browser}"
    }
  }
  return command
}

withNightlyPipeline(type, product, component, 600) {
  loadVaultSecrets(secrets)
  env.CITIZEN_FRONTEND_BASE_URL = params.CITIZEN_FRONTEND_BASE_URL
  env.MANAGE_CASES_BASE_URL = params.MANAGE_CASES_BASE_URL
  env.FUNCTIONAL_TESTS_WORKERS = params.FUNCTIONAL_TESTS_WORKERS
  enableSlackNotifications(channel)

  def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

  def browsers = ['chrome', 'firefox']
  def testConfigs = [
    [name: 'Add Participant Tests', grep: '@add-participant'],
    [name: 'Case Creation Tests', grep: '@add-new-case'],
    [name: 'Case Listing and Reporting Tests', grep: '@case-listing-and-reporting'],
    [name: 'Hearing Channel Tests', grep: '@hearing-channel'],
    [name: 'UI Tests', grep: '@ui-test'],
    [name: 'Amend Api Tests before listing', grep: '@amend-api-test', skip: 'true'],
    [name: 'Amend Api test after listing', grep: '@amend-api-test-after-listing', skip: 'true'],
    [name: 'Add new user test', grep: '@add-user', skip: 'true'],
    [name: 'Daily cause reports test', grep: '@daily-cause-list-tests']
  ]

  def bvtStages = browsers.collectMany { browser ->
    testConfigs.collect { cfg ->
      [
        name: "${browser.capitalize()} - ${cfg.name}",
        command: "playwright test --project=${browser} --grep ${cfg.grep}",
        skip: cfg.skip
      ]
    }
  } + [
    [name: 'Webkit - Smoke Tests', command: 'playwright test --project=webkit --grep @smoke']
  ]

  def regressionBrowsers = ['chrome']
  def regressionConfigs = [
    [name: 'Regression Suite Test Example', grep: '@regression-smoke', path: 'regression'],
    // Add more regression test configs here as needed
  ]

  def regressionStages = regressionBrowsers.collectMany { browser ->
    regressionConfigs.collect { cfg ->
      [
        name: "${browser.capitalize()} - ${cfg.name}",
        command: "playwright test ${cfg.path} --project=${browser} --grep ${cfg.grep}"
      ]
    }
  }

  def runPlaywrightStage = { stageName, command, reportName, skipCreateCase = null ->
    stage(stageName) {
      try {
        if (skipCreateCase != null) {
          env.SKIP_CREATE_CASE = skipCreateCase
        }
        yarnBuilder.yarn(command)
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      } finally {
        publishHTML([
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: "playwright-report",
          reportFiles: 'index.html',
          reportName: reportName
        ])
        if (skipCreateCase != null) {
          env.SKIP_CREATE_CASE = null
        }
      }
    }
  }

  def runBvtStages = { stages ->
    stages.each { s ->
      runPlaywrightStage(s.name, s.command, s.name, s.skip ?: null)
    }
  }

  def runRegressionStages = { stages ->
    stages.each { s ->
      runPlaywrightStage(s.name, s.command, s.name)
    }
  }

  afterAlways('DependencyCheckNightly') {
    stage('Set up playwright') {
      try {
        yarnBuilder.yarn('setup')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }

    if (params.TAGS_TO_RUN && !params.TAGS_TO_RUN.isEmpty()) {
      stage("${params.TAGS_TO_RUN} E2E Tests ${params.browser}") {
        try {
          currentBuild.displayName = "${params.TAGS_TO_RUN} E2E Tests"
          yarnBuilder.yarn(buildPlaywrightCommand(params.TAGS_TO_RUN))
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: "${params.TAGS_TO_RUN} E2E Tests ${params.browser}"
          ])
        }
      }
    } else {
      if (params.TEST_SUITE == 'bvt') {
        runBvtStages(bvtStages)
      }
      if (params.TEST_SUITE == 'regression') {
        runRegressionStages(regressionStages)
      }
      if (params.TEST_SUITE == 'bvt_and_regression') {
        runBvtStages(bvtStages)
        runRegressionStages(regressionStages)
      }
    }
  }
}

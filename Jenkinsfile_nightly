// #!groovy
properties([
  pipelineTriggers([cron('H 8 * * 1-5')]),
  disableConcurrentBuilds(),
  parameters([
    string(
      name: 'FUNCTIONAL_TESTS_WORKERS',
      defaultValue: '4',
      description: 'Number of workers running functional tests'
    ),
    string(
      name: 'TAGS_TO_RUN',
      defaultValue: '',
      description: 'Optionally, run a single or multiple tags (comma separated e.g. @cui, @exui)'
    ),
    choice(
      name: 'browser',
      choices: ['chrome', 'firefox', 'webkit', 'edge'],
      description: 'Which browser to use'
    ),
  ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "snl-automation"
def component = "e2e-tests"
def channel = "#list-assist-qa-builds"

static Map < String, Object > secret(String secretName, String envVariable) {
  [
    $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def secrets = [
  'snl-automation-bts-stg': [
    secret('test-password', 'TEST_USERNAME'),
    secret('test-username', 'TEST_PASSWORD'),
    secret('base-url', 'BASE_URL'),
  ]
]

def buildPlaywrightCommand(tags) {
  if (tags == null || tags.trim().isEmpty()) {
    return;
  }
  def tagList = tags.split(',').collect { it.trim() }
  def command = 'playwright test tests/'
    tagList.each { tag ->
    if (!tag.isEmpty()) {
      command += " --grep ${tag} --project ${params.browser}"
    }
  }
  return command
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withNightlyPipeline(type, product, component, 600) {
  loadVaultSecrets(secrets)
  env.CITIZEN_FRONTEND_BASE_URL = params.CITIZEN_FRONTEND_BASE_URL
  env.MANAGE_CASES_BASE_URL = params.MANAGE_CASES_BASE_URL
  env.FUNCTIONAL_TESTS_WORKERS = params.FUNCTIONAL_TESTS_WORKERS
  enableSlackNotifications(channel)

  afterAlways('DependencyCheckNightly') {
    stage('Set up playwright') {
      try {
        yarnBuilder.yarn('setup')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }

    stage('Chrome: Case Listing Tests') {
      try {
        currentBuild.displayName = "Case Listing And Reporting Tests ${params.browser}"
        yarnBuilder.yarn('test:chrome playwright test tests/case-listing.spec.ts --project ${params.browser}')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      } finally {
        publishHTML([
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: "playwright-report",
          reportFiles: 'index.html',
          reportName: 'Chrome Case Listing Tests'
        ])
      }
    }

    // Stage for all other tests
    stage('Chrome: All Other E2E Tests') {
      try {
        currentBuild.displayName = "All Other E2E Tests ${params.browser}"
        yarnBuilder.yarn('test:chrome playwright test tests/ --exclude tests/case-listing.spec.ts --project ${params.browser}')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      } finally {
        publishHTML([
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: "playwright-report",
          reportFiles: 'index.html',
          reportName: 'Chrome All Other E2E Tests ${params.browser}'
        ])
      }
    }
    stage('Firefox: Case Listing Tests') {
      try {
        currentBuild.displayName = "Case Listing And Reporting Tests ${params.browser}"
        yarnBuilder.yarn('test:firefox playwright test tests/case-listing.spec.ts --project ${params.browser}')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      } finally {
        publishHTML([
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: "playwright-report",
          reportFiles: 'index.html',
          reportName: 'Firefox Case Listing Tests'
        ])
      }
    }

    // Stage for all other tests
    stage('Firefox: All Other E2E Tests') {
      try {
        currentBuild.displayName = "All Other E2E Tests ${params.browser}"
        yarnBuilder.yarn('test:firefox playwright test tests/ --exclude tests/case-listing.spec.ts --project ${params.browser}')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      } finally {
        publishHTML([
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: "playwright-report",
          reportFiles: 'index.html',
          reportName: 'Firefox All Other E2E Tests ${params.browser}'
        ])
      }
    }
    stage('Webkit: Case Listing Tests') {
      try {
        currentBuild.displayName = "Case Listing And Reporting Tests ${params.browser}"
        yarnBuilder.yarn('test:webkit playwright test tests/case-listing.spec.ts --project ${params.browser}')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      } finally {
        publishHTML([
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: "playwright-report",
          reportFiles: 'index.html',
          reportName: 'Webkit Case Listing Tests'
        ])
      }
    }

    // Stage for all other tests
    stage('Webkit: All Other E2E Tests') {
      try {
        currentBuild.displayName = "All Other E2E Tests ${params.browser}"
        yarnBuilder.yarn('test:Webkit playwright test tests/ --exclude tests/case-listing.spec.ts --project ${params.browser}')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      } finally {
        publishHTML([
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: "playwright-report",
          reportFiles: 'index.html',
          reportName: 'Webkit All Other E2E Tests ${params.browser}'
        ])
      }
    }
  }
}